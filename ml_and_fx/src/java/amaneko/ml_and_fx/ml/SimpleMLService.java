package amaneko.ml_and_fx.ml;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;

import amaneko.ml_and_fx.model.UserPreferences;
import amaneko.ml_and_fx.service.SimpleMovieRecommendationService;

/**
 * –ü—Ä–æ—Å—Ç–æ–π ML —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ñ–∏–ª—å–º–æ–≤
 */
public class SimpleMLService implements MLService {

    private boolean modelLoaded = true; // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π

    private static final String USER_FACTORS_PATH = "models/movie_recommendation_model/userFactors";
    private static final String ITEM_FACTORS_PATH = "models/movie_recommendation_model/itemFactors";

    private transient SparkSession spark;
    private final Map<Integer, float[]> userFactors = new HashMap<>();
    private final Map<Integer, float[]> itemFactors = new HashMap<>();
    private boolean factorsLoaded = false;

    private SimpleMovieRecommendationService movieService;

    public SimpleMLService() {}
    public SimpleMLService(SimpleMovieRecommendationService movieService) {
        this.movieService = movieService;
    }
    public void setMovieService(SimpleMovieRecommendationService movieService) {
        this.movieService = movieService;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ ML –º–æ–¥–µ–ª—å
     */
    @Override
    public boolean isModelLoaded() {
        return modelLoaded;
    }

    private void ensureSpark() {
        if (spark == null) {
            spark = SparkSession.builder()
                    .appName("MovieRecommendationService")
                    .master("local[*]")
                    .config("spark.driver.bindAddress", "127.0.0.1")
                    .getOrCreate();
        }
    }

    private void loadFactors() {
        if (factorsLoaded) return;
        ensureSpark();
        // userFactors
        Dataset<Row> userDF = spark.read().parquet(USER_FACTORS_PATH);
        for (Row row : userDF.collectAsList()) {
            int id = row.getInt(row.fieldIndex("id"));
            List<?> features = row.getList(row.fieldIndex("features"));
            float[] vec = new float[features.size()];
            for (int i = 0; i < features.size(); i++) vec[i] = ((Number)features.get(i)).floatValue();
            userFactors.put(id, vec);
        }
        // itemFactors
        Dataset<Row> itemDF = spark.read().parquet(ITEM_FACTORS_PATH);
        for (Row row : itemDF.collectAsList()) {
            int id = row.getInt(row.fieldIndex("id"));
            List<?> features = row.getList(row.fieldIndex("features"));
            float[] vec = new float[features.size()];
            for (int i = 0; i < features.size(); i++) vec[i] = ((Number)features.get(i)).floatValue();
            itemFactors.put(id, vec);
        }
        factorsLoaded = true;
        // –õ–æ–≥–∏—Ä—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫—Ä—ã—Ç—ã—Ö –º–æ–¥–µ–ª—å—é
        System.out.println("[ML] userFactors ids: " + userFactors.keySet());
    }

    private float dot(float[] a, float[] b) {
        float sum = 0f;
        for (int i = 0; i < a.length; i++) sum += a[i] * b[i];
        return sum;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param count –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     * @return —Å–ø–∏—Å–æ–∫ ID —Ñ–∏–ª—å–º–æ–≤
     */
    @Override
    public List<Integer> getRecommendations(int userId, int count) {
        loadFactors();
        float[] userVec = userFactors.get(userId);
        if (userVec == null) {
            // Cold-start: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º top-N itemFactors (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–µ N id)
            System.out.println("[ML] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ userFactors. Cold-start fallback.");
            List<Integer> fallback = new ArrayList<>(itemFactors.keySet());
            java.util.Collections.shuffle(fallback);
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            List<Integer> filtered = new ArrayList<>();
            int checked = 0;
            for (Integer movieId : fallback) {
                if (hasDescription(movieId)) {
                    filtered.add(movieId);
                } else {
                    // System.out.println("[ML] –§–∏–ª—å–º " + movieId + " –Ω–µ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –∏—â–µ–º –¥—Ä—É–≥–æ–π...");
                }
                if (filtered.size() >= count) break;
                checked++;
                if (checked > fallback.size() * 2) break; // safety
            }
            return filtered;
        }
        // –°—á–∏—Ç–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
        List<Map.Entry<Integer, Float>> scored = itemFactors.entrySet().stream()
                .map(e -> Map.entry(e.getKey(), dot(userVec, e.getValue())))
                .sorted((a, b) -> -Float.compare(a.getValue(), b.getValue()))
                .limit(Math.max(count * 3, count + 5)) // –≤–∑—è—Ç—å –±–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                .collect(Collectors.toList());
        // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        List<Integer> result = new ArrayList<>();
        int checked = 0;
        for (Map.Entry<Integer, Float> entry : scored) {
            if (hasDescription(entry.getKey())) {
                result.add(entry.getKey());
            } else {
                // System.out.println("[ML] –§–∏–ª—å–º " + entry.getKey() + " –Ω–µ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –∏—â–µ–º –¥—Ä—É–≥–æ–π...");
            }
            if (result.size() >= count) break;
            checked++;
            if (checked > scored.size() * 2) break; // safety
        }
        java.util.Collections.shuffle(result);
        return result.stream().limit(count).collect(Collectors.toList());
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —É —Ñ–∏–ª—å–º–∞ (–∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ë–î –∏–ª–∏ –∫—ç—à—É)
    private boolean hasDescription(int movieId) {
        if (movieService == null) return true; // fallback: allow all if not set
        var movie = movieService.getMovieById(movieId);
        return movie != null && movie.getOverview() != null && !movie.getOverview().trim().isEmpty();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ñ–∏–ª—å–º–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param movieId ID —Ñ–∏–ª—å–º–∞
     * @return –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1.0 –¥–æ 5.0
     */
    @Override
    public float getPredictedRating(int userId, int movieId) {
        loadFactors();
        float[] userVec = userFactors.get(userId);
        float[] itemVec = itemFactors.get(movieId);
        if (userVec == null || itemVec == null) return 0f;
        return dot(userVec, itemVec);
    }

    private void retrainModelFromExternalProject() {
        try {
            System.out.println("[ML] –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ALS —á–µ—Ä–µ–∑ may_practic...");
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ JVM-–∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è Spark –Ω–∞ Java 17+/21+
            List<String> command = new ArrayList<>();
            command.add("java");
            command.add("--add-exports");
            command.add("java.base/sun.nio.ch=ALL-UNNAMED");
            command.add("--add-opens");
            command.add("java.base/java.nio=ALL-UNNAMED");
            command.add("-cp");
            command.add("/home/zwloader/IdeaProjects/may_practic/target/classes:/home/zwloader/IdeaProjects/may_practic/target/dependency/*");
            command.add("org.example.nanomachineson");
            command.add("/home/zwloader/IdeaProjects/ml_and_fx/models/movie_recommendation_model");
            System.out.println("[ML] –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: " + String.join(" ", command));
            ProcessBuilder pb = new ProcessBuilder(command);
            pb.redirectErrorStream(true); // –û–±—ä–µ–¥–∏–Ω–∏—Ç—å stdout –∏ stderr
            Process process = pb.start();
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞
            try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    System.out.println("[ALS] " + line);
                }
            }
            int exitCode = process.waitFor();
            if (exitCode == 0) {
                System.out.println("[ML] –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ALS –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
                this.factorsLoaded = false;
                loadFactors();
            } else {
                System.err.println("[ML] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ALS, –∫–æ–¥: " + exitCode);
            }
        } catch (Exception e) {
            System.err.println("[ML] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ALS: " + e.getMessage());
            // stack trace removed for compliance
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–∏
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param movieId ID —Ñ–∏–ª—å–º–∞
     */
    @Override
    public void updateViewingHistory(int userId, int movieId) {
        System.out.println("üß† ML: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + ", —Ñ–∏–ª—å–º " + movieId);
        retrainModelFromExternalProject();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ML –º–æ–¥–µ–ª–∏
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param preferences –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    public void updateUserPreferences(int userId, UserPreferences preferences) {
        System.out.println("üß† ML: –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId +
                          " (–∂–∞–Ω—Ä–æ–≤: " + preferences.getPreferredGenres().size() + ")");
        retrainModelFromExternalProject();
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É ML —Å–µ—Ä–≤–∏—Å–∞
     */
    @Override
    public void shutdown() {
        System.out.println("üß† ML —Å–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
        modelLoaded = false;
    }
}
