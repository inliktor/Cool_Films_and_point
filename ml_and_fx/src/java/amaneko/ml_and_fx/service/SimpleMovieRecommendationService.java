package amaneko.ml_and_fx.service;

import java.sql.Connection;
import java.sql.DriverManager; // Added import
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; // Added import
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import amaneko.ml_and_fx.ml.MLService;
import amaneko.ml_and_fx.ml.SimpleMLService;
import amaneko.ml_and_fx.model.Genre;
import amaneko.ml_and_fx.model.Movie;
import amaneko.ml_and_fx.model.UserPreferences;
import amaneko.ml_and_fx.model.UserRating;

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ñ–∏–ª—å–º–æ–≤
 */
public class SimpleMovieRecommendationService {

    private final Connection dbConnection;
    private final MLService mlService; // Changed type to MLService
    private int currentUserId = 1; // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –ö—ç—à –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Integer, UserPreferences> userPreferencesCache = new HashMap<>();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ (–¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ - DB)
    private final Map<Integer, Set<Integer>> shownMoviesCache = new HashMap<>();

    // Updated constructor
    public SimpleMovieRecommendationService() {
        this.dbConnection = connectToDatabase();
        this.mlService = new SimpleMLService(this); // Pass self for movie description filtering
        // –£–¥–∞–ª—ë–Ω –≤—ã–∑–æ–≤ createTablesIfNotExist();
    }

    // New method to establish database connection
    private Connection connectToDatabase() {
        try {
            // Database connection details (consider making these configurable)
            String dbUrl = "jdbc:postgresql://localhost:15432/postgres";
            String dbUser = "zwloader";
            String dbPassword = "0010085070Pgsql";
            Connection connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
            System.out.println("‚úÖ SimpleMovieRecommendationService: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
            return connection;
        } catch (SQLException e) {
            System.err.println("‚ùå SimpleMovieRecommendationService: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: " + e.getMessage());
            // stack trace removed for compliance
            throw new RuntimeException("Failed to connect to the database in SimpleMovieRecommendationService", e);
        }
    }
    
    // Getter for the database connection
    public Connection getDbConnection() {
        return dbConnection;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void setCurrentUser(int userId) {
        this.currentUserId = userId;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public int getCurrentUserId() {
        return currentUserId;
    }
    
    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ ML, –ø—Ä–æ—Å—Ç–æ)
     * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:
     * - –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     * - –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ
     * - –ï—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ ML –Ω–µ—Ç, –±–µ—Ä–µ—Ç –∏–∑ –ë–î
     */
    public List<Movie> getRecommendationsForUser(int userId, int count) {
        System.out.println("–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userId);
        
        List<Movie> recommendations = new ArrayList<>();
        Set<Integer> recommendedIds = new HashSet<>(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Ñ–∏–ª—å–º–æ–≤
        Set<Integer> previouslyRecommendedMovies = getSessionRecommendedMovies(userId);
        System.out.println("üîç –£–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: " + previouslyRecommendedMovies.size() + " —Ñ–∏–ª—å–º–æ–≤");
        
        UserPreferences preferences = getUserPreferences(userId);
        boolean hasPreferredGenres = !preferences.getPreferredGenres().isEmpty();
        
        if (hasPreferredGenres) {
            System.out.println("üìä –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.");
            // 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∂–∞–Ω—Ä–æ–≤
            if (mlService.isModelLoaded()) {
                try {
                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ —á–∞—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞
                    List<Integer> movieIds = mlService.getRecommendations(userId, count * 8); 
                    Collections.shuffle(movieIds); 

                    List<String> preferredGenres = preferences.getPreferredGenres().stream()
                        .map(Genre::getName)
                        .toList();
                    double minRating = preferences.getMinRating();
                    boolean includeWatched = preferences.isIncludeWatchedMovies();
                    Set<Integer> watchedMovies = getShownMovies(userId); 

                    System.out.println("ü§ñ –ü–æ–ª—É—á–µ–Ω–æ " + movieIds.size() + " ID –æ—Ç ML. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...");

                    for (Integer movieId : movieIds) {
                        if (recommendations.size() >= count) break;
                        if (recommendedIds.contains(movieId)) continue;
                        if (previouslyRecommendedMovies.contains(movieId)) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ
                        if (!includeWatched && watchedMovies.contains(movieId)) continue; // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ

                        Movie movie = getMovieById(movieId);
                        if (movie != null) {
                            float predictedRating = mlService.getPredictedRating(userId, movieId);
                            movie.setPredictedRating(predictedRating);

                            boolean genreOk = preferredGenres.isEmpty() ||
                                (movie.getGenres() != null && preferredGenres.stream().anyMatch(g -> movie.getGenres().contains(g)));
                            boolean ratingOk = movie.getVoteAverage() >= minRating;

                            if (genreOk && ratingOk) {
                                recommendations.add(movie);
                                recommendedIds.add(movieId);
                            }
                        }
                    }
                    System.out.println("ü§ñ –ü–æ—Å–ª–µ ML –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: " + recommendations.size());

                } catch (Exception e) {
                    System.err.println("–û—à–∏–±–∫–∞ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: " + e.getMessage());
                }
            }
            
            // 2. –ï—Å–ª–∏ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –Ω–µ—Ç, –¥–æ–±–∏—Ä–∞–µ–º –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–∑ –ë–î
            if (recommendations.size() < count) {
                int neededCount = count - recommendations.size();
                System.out.println("üìä –î–æ–±–∏—Ä–∞–µ–º " + neededCount + " —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –ë–î...");

                List<Movie> personalizedFallback = getPersonalizedRecommendations(userId, neededCount * 3);

                for (Movie movie : personalizedFallback) {
                    if (recommendations.size() >= count) break;
                    if (!recommendedIds.contains(movie.getId()) && !previouslyRecommendedMovies.contains(movie.getId())) {
                        recommendations.add(movie);
                        recommendedIds.add(movie.getId());
                    }
                }
                System.out.println("üìä –ü–æ—Å–ª–µ –¥–æ–±–æ—Ä–∞ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö (–∏–∑ –ë–î): " + recommendations.size());
            }

        } else {
            System.out.println("üî• –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.");
            // 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–æ–±—â–∏–µ)
            if (mlService.isModelLoaded()) {
                try {
                    List<Integer> movieIds = mlService.getRecommendations(userId, count * 8); 
                    Collections.shuffle(movieIds); 

                    UserPreferences userPrefs = getUserPreferences(userId);
                    boolean includeWatched = userPrefs.isIncludeWatchedMovies();
                    Set<Integer> watchedMovies = getShownMovies(userId); 

                    System.out.println("ü§ñ –ü–æ–ª—É—á–µ–Ω–æ " + movieIds.size() + " ID –æ—Ç ML. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...");

                    for (Integer movieId : movieIds) {
                        if (recommendations.size() >= count) break;
                        if (recommendedIds.contains(movieId)) continue;
                        if (previouslyRecommendedMovies.contains(movieId)) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ
                        if (!includeWatched && watchedMovies.contains(movieId)) continue; // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ

                        Movie movie = getMovieById(movieId);
                        if (movie != null) {
                            float predictedRating = mlService.getPredictedRating(userId, movieId);
                            movie.setPredictedRating(predictedRating);
                            recommendations.add(movie);
                            recommendedIds.add(movie.getId());
                        }
                    }
                    System.out.println("ü§ñ –ü–æ—Å–ª–µ ML (–æ–±—â–∏—Ö): " + recommendations.size());

                } catch (Exception e) {
                    System.err.println("–û—à–∏–±–∫–∞ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: " + e.getMessage());
                }
            }

            // 2. –ï—Å–ª–∏ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–±–∏—Ä–∞–µ–º –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
            if (recommendations.size() < count) {
                int neededCount = count - recommendations.size();
                System.out.println("üî• –î–æ–±–∏—Ä–∞–µ–º " + neededCount + " —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö...");
                List<Movie> popularFallback = getPopularMovies(neededCount * 3); 
                
                UserPreferences userPrefs = getUserPreferences(userId);
                boolean includeWatched = userPrefs.isIncludeWatchedMovies();
                Set<Integer> watchedMovies = getShownMovies(userId); 

                for (Movie movie : popularFallback) {
                    if (recommendations.size() >= count) break;
                    if (!recommendedIds.contains(movie.getId()) && 
                        !previouslyRecommendedMovies.contains(movie.getId()) && 
                        (includeWatched || !watchedMovies.contains(movie.getId()))) {
                        recommendations.add(movie);
                        recommendedIds.add(movie.getId());
                    }
                }
                System.out.println("üî• –ü–æ—Å–ª–µ –¥–æ–±–æ—Ä–∞ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö: " + recommendations.size());
            }
        }
        
        if (recommendations.isEmpty() && !previouslyRecommendedMovies.isEmpty()) {
            System.out.println("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.");
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –±—ã–ª–∞ –ø—Ä–æ—à–ª–∞—è —Å–µ—Å—Å–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –∏—â–µ–º —Å–Ω–æ–≤–∞
            clearSessionRecommendations(userId);
            return getRecommendationsForUser(userId, count); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤, –Ω–æ —É–∂–µ —Å —á–∏—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
        }
        
        // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        markMoviesAsRecommended(userId, recommendations);
        
        System.out.println("‚úÖ –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ " + recommendations.size() + " –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");
        return recommendations;
    }
    
    /**
     * ML-–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—É–±—Ä–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –≤–∫–ª—é—á–µ–Ω—ã –≤ getRecommendationsForUser)
     */
    // private List<Movie> getMLBasedRecommendations(int userId, int count) {
    //     ...
    // }
    
    /**
     * –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
     */
    public List<Movie> getPersonalizedRecommendations(int userId, int count) {
        List<Movie> recommendations = new ArrayList<>();
        Set<Integer> watchedMovies = getShownMovies(userId); // –¢–µ–ø–µ—Ä—å –∏–∑ –ë–î –∏ –∫—ç—à–∞
        
        try {
            UserPreferences preferences = getUserPreferences(userId);
            
            if (preferences != null && !preferences.getPreferredGenres().isEmpty()) {
                StringBuilder queryBuilder = new StringBuilder();
                queryBuilder.append("""
                    WITH movie_data AS (
                        SELECT m.id, m.title, m.overview, m.vote_average, 
                               m.popularity, m.release_year, m.poster_path,
                               STRING_AGG(g.name, ', ') as genres,
                               COUNT(DISTINCT g.id) as genre_count
                        FROM movies m
                        LEFT JOIN movie_genres mg ON m.id = mg.movie_id
                        LEFT JOIN genres g ON mg.genre_id = g.id
                        WHERE m.vote_average >= ?
                """);
                
                if (!preferences.getPreferredGenres().isEmpty()) {
                    queryBuilder.append(" AND g.name IN (");
                    for (int i = 0; i < preferences.getPreferredGenres().size(); i++) {
                        if (i > 0) queryBuilder.append(", ");
                        queryBuilder.append("?");
                    }
                    queryBuilder.append(")");
                }
                
                // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã, –µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (!preferences.isIncludeWatchedMovies() && !watchedMovies.isEmpty()) {
                    queryBuilder.append(" AND m.id NOT IN (");
                    for (int i = 0; i < watchedMovies.size(); i++) {
                        if (i > 0) queryBuilder.append(", ");
                        queryBuilder.append("?");
                    }
                    queryBuilder.append(")");
                }
                
                queryBuilder.append("""
                    GROUP BY m.id, m.title, m.overview, m.vote_average, 
                             m.popularity, m.release_year, m.poster_path
                    )
                    SELECT id, title, overview, vote_average, 
                           popularity, release_year, poster_path, genres
                    FROM movie_data
                    ORDER BY genre_count DESC, vote_average DESC, popularity DESC
                    LIMIT ?
                """);
                
                try (PreparedStatement stmt = dbConnection.prepareStatement(queryBuilder.toString())) {
                    int paramIndex = 1;
                    
                    stmt.setDouble(paramIndex++, preferences.getMinRating());
                    
                    for (Genre genre : preferences.getPreferredGenres()) {
                        stmt.setString(paramIndex++, genre.getName());
                    }
                    
                    if (!preferences.isIncludeWatchedMovies()) { // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
                        for (Integer movieId : watchedMovies) {
                            stmt.setInt(paramIndex++, movieId);
                        }
                    }
                    
                    stmt.setInt(paramIndex++, count);
                    
                    recommendations = executeMovieQuery(stmt);
                    
                    if (!recommendations.isEmpty()) {
                        // Mark as shown in current session, DB persistence is through recordMovieView
                        // markMoviesAsShown(userId, recommendations); // –£–±—Ä–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ getRecommendationsForUser
                    }
                    
                    System.out.println("üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: " + recommendations.size());
                }
            }
            
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: " + e.getMessage());
        }
        
        return recommendations;
    }
    
    /**
     * –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã (fallback) - —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º
     */
    public List<Movie> getPopularMovies(int count) {
        List<Movie> movies = new ArrayList<>();
        UserPreferences preferences = getUserPreferences(currentUserId);
        boolean includeWatched = preferences.isIncludeWatchedMovies();
        Set<Integer> watchedMovies = getShownMovies(currentUserId);

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("""
            SELECT m.id, m.title, m.overview, m.vote_average, 
                   m.popularity, m.release_year, m.poster_path,
                   STRING_AGG(g.name, ', ') as genres
            FROM movies m
            LEFT JOIN movie_genres mg ON m.id = mg.movie_id
            LEFT JOIN genres g ON mg.genre_id = g.id
            WHERE m.vote_average > 7.0 AND m.popularity > 50
        """);

        if (!includeWatched && !watchedMovies.isEmpty()) {
            queryBuilder.append(" AND m.id NOT IN (");
            for (int i = 0; i < watchedMovies.size(); i++) {
                if (i > 0) queryBuilder.append(", ");
                queryBuilder.append("?");
            }
            queryBuilder.append(")");
        }

        queryBuilder.append("""
            GROUP BY m.id, m.title, m.overview, m.vote_average, 
                     m.popularity, m.release_year, m.poster_path
            ORDER BY RANDOM(), m.popularity DESC, m.vote_average DESC
            LIMIT ?
            """);
        
        try (PreparedStatement stmt = dbConnection.prepareStatement(queryBuilder.toString())) {
            int paramIndex = 1;
            if (!includeWatched && !watchedMovies.isEmpty()) {
                for (Integer movieId : watchedMovies) {
                    stmt.setInt(paramIndex++, movieId);
                }
            }
            stmt.setInt(paramIndex++, count);
            movies = executeMovieQuery(stmt);
            System.out.println("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã: " + movies.size());
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: " + e.getMessage());
        }
        
        return movies;
    }
    
    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∏–ª—å–º–æ–º (–ø—Ä–æ—Å–º–æ—Ç—Ä, –æ—Ü–µ–Ω–∫–∞, –ø—É–±–ª–∏–∫–∞—Ü–∏—è)
     * –ó–∞–º–µ–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ saveUserRating, markMovieAsWatched, –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    public boolean processMovieAction(int userId, int movieId, MovieAction action, Double rating, String reviewText) {
        System.out.println("üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∏–ª—å–º–æ–º: " + action + " (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=" + userId + ", —Ñ–∏–ª—å–º=" + movieId + ")");
        
        try {
            return switch (action) {
                case RATE_ONLY -> saveRatingOnly(userId, movieId, rating, reviewText);
                case RATE_AND_PUBLISH -> saveRatingAndPublish(userId, movieId, rating, reviewText);
                case WATCH_ONLY -> markAsWatchedOnly(userId, movieId);
                default -> {
                    System.err.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: " + action);
                    yield false;
                }
            };
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∏–ª—å–º–æ–º: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Enum –¥–ª—è —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∏–ª—å–º–æ–º
     */
    public enum MovieAction {
        RATE_ONLY,          // –¢–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∞ (handleSave)
        RATE_AND_PUBLISH,   // –û—Ü–µ–Ω–∫–∞ + –ø—É–±–ª–∏–∫–∞—Ü–∏—è (handlePublish)
        WATCH_ONLY          // –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä (handleWatched)
    }
    
    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∏
     */
    private boolean saveRatingOnly(int userId, int movieId, Double rating, String reviewText) {
        UserRating userRating = new UserRating(userId, movieId, rating != null ? rating : 0.0, reviewText);
        userRating.setPublished(false);
        
        boolean success = saveUserRatingInternal(userRating);
        if (success) {
            updateMovieMetadata(userId, movieId, rating);
        }
        return success;
    }
    
    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
     */
    private boolean saveRatingAndPublish(int userId, int movieId, Double rating, String reviewText) {
        if (reviewText == null || reviewText.trim().isEmpty()) {
            System.err.println("‚ùå –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞");
            return false;
        }
        
        UserRating userRating = new UserRating(userId, movieId, rating != null ? rating : 0.0, reviewText);
        userRating.setPublished(true);
        
        boolean success = saveUserRatingInternal(userRating);
        if (success) {
            updateMovieMetadata(userId, movieId, rating);
        }
        return success;
    }
    
    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    private boolean markAsWatchedOnly(int userId, int movieId) {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ user_views (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)
        recordMovieView(userId, movieId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ML –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        updateMovieMetadata(userId, movieId, null);
        
        return true;
    }
    
    /**
     * –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞ (ML, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∫—ç—à–∏)
     */
    private void updateMovieMetadata(int userId, int movieId, @SuppressWarnings("unused") Double rating) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ ML
            mlService.updateViewingHistory(userId, movieId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ
            // –ü–∞—Ä–∞–º–µ—Ç—Ä rating —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –±—É–¥—É—â–∏—Ö ML-—Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç
            // —É—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            Movie movie = getMovieById(movieId);
            if (movie != null) {
                updateUserPreferences(userId, movie);
            }
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            userPreferencesCache.remove(userId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
            addToShownMoviesCache(userId, movieId);
            
            System.out.println("üß† –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
            
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞: " + e.getMessage());
        }
    }
    
    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏)
     */
    private boolean saveUserRatingInternal(UserRating rating) {
        System.out.println("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=" + rating.getUserId() + 
                          ", —Ñ–∏–ª—å–º=" + rating.getMovieId() + 
                          ", —Ä–µ–π—Ç–∏–Ω–≥=" + rating.getRating() + 
                          ", –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞=" + rating.isPublished());
        
        String checkQuery = "SELECT id FROM user_ratings WHERE user_id = ? AND movie_id = ?";
        String insertQuery = """
            INSERT INTO user_ratings (user_id, movie_id, rating, review_text, published, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """;
        String updateQuery = """
            UPDATE user_ratings 
            SET rating = ?, review_text = ?, published = ?, updated_at = CURRENT_TIMESTAMP
            WHERE user_id = ? AND movie_id = ?
            """;
        
        try {
            boolean exists;
            try (PreparedStatement checkStmt = dbConnection.prepareStatement(checkQuery)) {
                checkStmt.setInt(1, rating.getUserId());
                checkStmt.setInt(2, rating.getMovieId());
                ResultSet rs = checkStmt.executeQuery();
                exists = rs.next();
            }
            
            PreparedStatement stmt;
            if (exists) {
                stmt = dbConnection.prepareStatement(updateQuery);
                stmt.setDouble(1, rating.getRating());
                stmt.setString(2, rating.getReviewText());
                stmt.setBoolean(3, rating.isPublished());
                stmt.setInt(4, rating.getUserId());
                stmt.setInt(5, rating.getMovieId());
                System.out.println("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É");
            } else {
                stmt = dbConnection.prepareStatement(insertQuery);
                stmt.setInt(1, rating.getUserId());
                stmt.setInt(2, rating.getMovieId());
                stmt.setDouble(3, rating.getRating());
                stmt.setString(4, rating.getReviewText());
                stmt.setBoolean(5, rating.isPublished());
                System.out.println("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É");
            }
            
            int rowsAffected = stmt.executeUpdate();
            stmt.close();
            
            if (rowsAffected > 0) {
                System.out.println("‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                // –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
                recordMovieView(rating.getUserId(), rating.getMovieId()); 
                return true;
            } else {
                System.out.println("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
                return false;
            }
            
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * –û—Ç–º–µ—á–∞–µ—Ç —Ñ–∏–ª—å–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –±–µ–∑ –æ—Ü–µ–Ω–∫–∏
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param movieId ID —Ñ–∏–ª—å–º–∞
     * @return true –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
     */
    public boolean markMovieAsWatched(int userId, int movieId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ–± —ç—Ç–æ–º —Ñ–∏–ª—å–º–µ
            String checkSql = "SELECT id FROM user_movie_ratings WHERE user_id = ? AND movie_id = ?";
            PreparedStatement checkStmt = dbConnection.prepareStatement(checkSql);
            checkStmt.setInt(1, userId);
            checkStmt.setInt(2, movieId);
            ResultSet resultSet = checkStmt.executeQuery();
            
            if (resultSet.next()) {
                // –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                int ratingId = resultSet.getInt("id");
                String updateSql = "UPDATE user_movie_ratings SET is_watched = 1 WHERE id = ?";
                PreparedStatement updateStmt = dbConnection.prepareStatement(updateSql);
                updateStmt.setInt(1, ratingId);
                updateStmt.executeUpdate();
                
                System.out.println("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–∏–ª—å–º–∞ (ID: " + movieId + ") –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: " + userId + ")");
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–µ–∑ –æ—Ü–µ–Ω–∫–∏
                String insertSql = "INSERT INTO user_movie_ratings (user_id, movie_id, is_watched, watched_date) VALUES (?, ?, 1, CURRENT_TIMESTAMP)";
                PreparedStatement insertStmt = dbConnection.prepareStatement(insertSql);
                insertStmt.setInt(1, userId);
                insertStmt.setInt(2, movieId);
                insertStmt.executeUpdate();
                
                System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–∏–ª—å–º–∞ (ID: " + movieId + ") –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: " + userId + ")");
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            mlService.updateViewingHistory(userId, movieId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
            if (!shownMoviesCache.containsKey(userId)) {
                shownMoviesCache.put(userId, new HashSet<>());
            }
            shownMoviesCache.get(userId).add(movieId);
            
            return true;
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ñ–∏–ª—å–º–∞ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å–º –≤ –∫—ç—à –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param movieId ID —Ñ–∏–ª—å–º–∞
     */
    private void addToShownMoviesCache(int userId, int movieId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Set<Integer> userShownMovies = shownMoviesCache.computeIfAbsent(userId, k -> new HashSet<>());
        
        // –î–æ–±–∞–≤–ª—è–µ–º ID —Ñ–∏–ª—å–º–∞ –≤ –∫—ç—à –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
        userShownMovies.add(movieId);
        
        System.out.println("üìù –§–∏–ª—å–º ID:" + movieId + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:" + userId);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ML-–º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param movie –§–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω
     */
    public void updateUserPreferences(int userId, Movie movie) {
        try {
            if (movie == null) return;
            
            // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞
            String genres = movie.getGenres();
            List<Genre> movieGenres = new ArrayList<>();
            
            if (genres != null && !genres.isEmpty()) {
                String[] genreNames = genres.split(", ");
                for (String genreName : genreNames) {
                    movieGenres.add(new Genre(0, genreName.trim()));
                }
            }
            
            if (movieGenres.isEmpty()) {
                System.out.println("‚ÑπÔ∏è –£ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç –∂–∞–Ω—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π");
                return;
            }
            
            // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            UserPreferences userPreferences = getUserPreferences(userId);
            if (userPreferences == null) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                userPreferences = new UserPreferences(userId);
            }
            
            // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∂–∞–Ω—Ä–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
            for (Genre genre : movieGenres) {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –∂–∞–Ω—Ä–∞ –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userPreferences.addPreferredGenre(genre);
                System.out.println("‚ûï –£–≤–µ–ª–∏—á–µ–Ω –≤–µ—Å –∂–∞–Ω—Ä–∞ '" + genre.getName() + "' –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
            
            // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            saveUserPreferences(userPreferences);
            System.out.println("üíæ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞");
            
            // 5. –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º ML-–º–æ–¥–µ–ª—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            mlService.updateUserPreferences(userId, userPreferences);
            
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public UserPreferences getUserPreferences(int userId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (userPreferencesCache.containsKey(userId)) {
            return userPreferencesCache.get(userId);
        }
        
        UserPreferences preferences = new UserPreferences(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Å–æ–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—ã–±–∏—Ä–∞–ª –∂–∞–Ω—Ä—ã –≤—Ä—É—á–Ω—É—é
        // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ PreferencesController –∏–ª–∏ —è–≤–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–º.
        // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ.
        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∂–∞–Ω—Ä—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ë–î –≤ —Ç–∞–±–ª–∏—Ü–µ user_preferences_genres
        // –ü–æ–∫–∞ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∂–∞–Ω—Ä—ã –±—É–¥—É—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –Ω–∞ –ª–µ—Ç—É –∏–ª–∏ –±—Ä–∞—Ç—å—Å—è –∏–∑ UI.
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—é –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑ –æ—Ü–µ–Ω–æ–∫, –µ—Å–ª–∏ –∂–∞–Ω—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã.
        String genreQuery = """
            SELECT g.name, AVG(ur.rating) as avg_rating, COUNT(*) as count
            FROM user_ratings ur
            JOIN movie_genres mg ON ur.movie_id = mg.movie_id
            JOIN genres g ON mg.genre_id = g.id
            WHERE ur.user_id = ? AND ur.rating >= 4.0
            GROUP BY g.id, g.name
            HAVING COUNT(*) >= 1
            ORDER BY avg_rating DESC, count DESC
            LIMIT 5
            """;
        try (PreparedStatement stmt = dbConnection.prepareStatement(genreQuery)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            List<Genre> preferredGenres = new ArrayList<>();
            while (rs.next()) {
                preferredGenres.add(new Genre(0, rs.getString("name")));
            }
            preferences.setPreferredGenres(preferredGenres);
            System.out.println("üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: " + preferredGenres.size() + " –∂–∞–Ω—Ä–æ–≤ (–∏–∑ –æ—Ü–µ–Ω–æ–∫)");
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: " + e.getMessage());
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        preferences.setMinRating(6.0);
        preferences.setIncludeWatchedMovies(false); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        userPreferencesCache.put(userId, preferences);
        
        return preferences;
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void saveUserPreferences(UserPreferences preferences) {
        // –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∂–∞–Ω—Ä—ã –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Ä—É—á–Ω—É—é
        // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ UserPreferences –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î, —Ç–æ–ª—å–∫–æ –≤ –∫—ç—à.
        // –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É user_preferences –∏ –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏.
        userPreferencesCache.put(preferences.getUserId(), preferences);
        System.out.println("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à");
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∂–∞–Ω—Ä—ã
     */
    public List<Genre> getAllGenres() {
        List<Genre> genres = new ArrayList<>();
        
        String query = "SELECT id, name FROM genres ORDER BY name";
        
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                genres.add(new Genre(rs.getInt("id"), rs.getString("name")));
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–Ω—Ä–æ–≤: " + e.getMessage());
        }
        
        return genres;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å–º–∞
     */
    public UserRating getUserRating(int userId, int movieId) {
        String query = """
            SELECT rating, review_text, created_at, updated_at
            FROM user_ratings 
            WHERE user_id = ? AND movie_id = ?
            """;
        
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            stmt.setInt(2, movieId);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                UserRating rating = new UserRating(
                    userId, 
                    movieId, 
                    rs.getDouble("rating"), 
                    rs.getString("review_text")
                );
                return rating;
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: " + e.getMessage());
        }
        
        return null;
    }
    
    /**
     * –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    public List<Movie> searchMovies(String searchTerm, int limit) {
        List<Movie> movies = new ArrayList<>();
        UserPreferences preferences = getUserPreferences(currentUserId);
        boolean includeWatched = preferences.isIncludeWatchedMovies();
        Set<Integer> watchedMovies = getShownMovies(currentUserId);

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("""
            SELECT m.id, m.title, m.overview, m.vote_average, 
                   m.popularity, m.release_year, m.poster_path,
                   STRING_AGG(g.name, ', ') as genres
            FROM movies m
            LEFT JOIN movie_genres mg ON m.id = mg.movie_id
            LEFT JOIN genres g ON mg.genre_id = g.id
            WHERE LOWER(m.title) LIKE LOWER(?) OR LOWER(m.overview) LIKE LOWER(?)
        """);

        if (!includeWatched && !watchedMovies.isEmpty()) {
            queryBuilder.append(" AND m.id NOT IN (");
            for (int i = 0; i < watchedMovies.size(); i++) {
                if (i > 0) queryBuilder.append(", ");
                queryBuilder.append("?");
            }
            queryBuilder.append(")");
        }

        queryBuilder.append("""
            GROUP BY m.id, m.title, m.overview, m.vote_average, 
                     m.popularity, m.release_year, m.poster_path
            ORDER BY m.popularity DESC
            LIMIT ?
            """);

        try (PreparedStatement stmt = dbConnection.prepareStatement(queryBuilder.toString())) {
            int paramIndex = 1;
            stmt.setString(paramIndex++, "%" + searchTerm + "%");
            stmt.setString(paramIndex++, "%" + searchTerm + "%");
            if (!includeWatched && !watchedMovies.isEmpty()) {
                for (Integer movieId : watchedMovies) {
                    stmt.setInt(paramIndex++, movieId);
                }
            }
            stmt.setInt(paramIndex++, limit);
            movies = executeMovieQuery(stmt);
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: " + e.getMessage());
        }

        return movies;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º –ø–æ ID
     */
    public Movie getMovieById(int movieId) {
        String query = """
            SELECT m.id, m.title, m.overview, m.vote_average, 
                   m.popularity, m.release_year, m.poster_path,
                   STRING_AGG(g.name, ', ') as genres
            FROM movies m
            LEFT JOIN movie_genres mg ON m.id = mg.movie_id
            LEFT JOIN genres g ON mg.genre_id = g.id
            WHERE m.id = ?
            GROUP BY m.id, m.title, m.overview, m.vote_average, 
                     m.popularity, m.release_year, m.poster_path
            """;

        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, movieId);
            List<Movie> movies = executeMovieQuery(stmt);
            return movies.isEmpty() ? null : movies.get(0);
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞: " + e.getMessage());
        }

        return null;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç user_views)
     */
    public Movie loadMovieWithUserData(int movieId, int userId) {
        Movie movie = getMovieById(movieId);
        if (movie != null) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            UserRating userRating = getUserRating(userId, movieId);
            if (userRating != null) {
                movie.setUserRating(userRating);
                // –§–∏–ª—å–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞
                movie.setWatched(true); 
                if (userRating.getRating() >= 4.0) {
                    movie.setRewatch(true);
                }
            } else {
                // –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º user_views
                if (isMovieWatchedByUser(userId, movieId)) {
                    movie.setWatched(true);
                }
            }
        }
        return movie;
    }
    
    /**
     * –§–∏–ª—å–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    public List<Movie> getRecommendationsForRewatch(int userId, int count) {
        List<Movie> recommendations = new ArrayList<>();
        
        String query = """
            SELECT m.id, m.title, m.overview, m.vote_average, 
                   m.popularity, m.release_year, m.poster_path,
                   STRING_AGG(g.name, ', ') as genres,
                   ur.rating as user_rating
            FROM movies m
            LEFT JOIN movie_genres mg ON m.id = mg.movie_id
            LEFT JOIN genres g ON mg.genre_id = g.id
            INNER JOIN user_ratings ur ON m.id = ur.movie_id
            WHERE ur.user_id = ? AND ur.rating >= 4
            GROUP BY m.id, m.title, m.overview, m.vote_average, 
                     m.popularity, m.release_year, m.poster_path, ur.rating
            ORDER BY RANDOM(), ur.rating DESC, m.vote_average DESC
            LIMIT ?
            """;
        
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            stmt.setInt(2, count);
            
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Movie movie = new Movie(
                    rs.getInt("id"),
                    rs.getString("title"),
                    rs.getString("overview"),
                    rs.getDouble("vote_average"),
                    rs.getDouble("popularity"),
                    rs.getInt("release_year"),
                    rs.getString("poster_path"),
                    rs.getString("genres")
                );
                
                UserRating userRating = new UserRating(userId, movie.getId(), rs.getDouble("user_rating"), "");
                movie.setUserRating(userRating);
                movie.setWatched(true);
                movie.setRewatch(true);
                
                recommendations.add(movie);
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞: " + e.getMessage());
        }
        
        return recommendations;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å–º—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç user_views
     */
    public List<Movie> getAllMovies(int count, int userId) { // –î–æ–±–∞–≤–ª–µ–Ω userId
        List<Movie> movies = new ArrayList<>();
        UserPreferences preferences = getUserPreferences(userId); 
        boolean includeWatched = preferences.isIncludeWatchedMovies();
        Set<Integer> watchedMovies = getShownMovies(userId); 

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("""
            SELECT m.id, m.title, m.overview, m.vote_average, 
                   m.popularity, m.release_year, m.poster_path,
                   STRING_AGG(g.name, ', ') as genres
            FROM movies m
            LEFT JOIN movie_genres mg ON m.id = mg.movie_id
            LEFT JOIN genres g ON mg.genre_id = g.id
        """);

        if (!includeWatched && !watchedMovies.isEmpty()) {
            queryBuilder.append(" WHERE m.id NOT IN (");
            for (int i = 0; i < watchedMovies.size(); i++) {
                if (i > 0) queryBuilder.append(", ");
                queryBuilder.append("?");
            }
            queryBuilder.append(")");
        }

        queryBuilder.append("""
            GROUP BY m.id, m.title, m.overview, m.vote_average, 
                     m.popularity, m.release_year, m.poster_path
            ORDER BY m.popularity DESC, m.vote_average DESC
            LIMIT ?
            """);
        
        try (PreparedStatement stmt = dbConnection.prepareStatement(queryBuilder.toString())) {
            int paramIndex = 1;
            if (!includeWatched && !watchedMovies.isEmpty()) {
                for (Integer movieId : watchedMovies) {
                    stmt.setInt(paramIndex++, movieId);
                }
            }
            stmt.setInt(paramIndex++, count);
            
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Movie movie = new Movie(
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("overview"),
                        rs.getDouble("vote_average"),
                        rs.getDouble("popularity"),
                        rs.getInt("release_year"),
                        rs.getString("poster_path"),
                        ""
                    );
                    
                    String genres = rs.getString("genres");
                    movie.setGenres(genres != null ? genres : "");
                    
                    movies.add(movie);
                }
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤: " + e.getMessage());
        }
        
        System.out.println("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + movies.size() + " —Ñ–∏–ª—å–º–æ–≤ –∏–∑ getAllMovies");
        return movies;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º—ã, –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    public List<Movie> getRatedMovies(int userId) {
        List<Movie> movies = new ArrayList<>();
        
        String query = """
            SELECT m.id, m.title, m.overview, m.vote_average, 
                   m.popularity, m.release_year, m.poster_path,
                   STRING_AGG(g.name, ', ') as genres,
                   ur.rating, ur.review_text, ur.published
            FROM movies m
            LEFT JOIN movie_genres mg ON m.id = mg.movie_id
            LEFT JOIN genres g ON mg.genre_id = g.id
            INNER JOIN user_ratings ur ON m.id = ur.movie_id
            WHERE ur.user_id = ?
            GROUP BY m.id, m.title, m.overview, m.vote_average, 
                     m.popularity, m.release_year, m.poster_path,
                     ur.rating, ur.review_text, ur.published
            ORDER BY ur.rating DESC, m.vote_average DESC
            """;
        
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Movie movie = new Movie(
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("overview"),
                        rs.getDouble("vote_average"),
                        rs.getDouble("popularity"),
                        rs.getInt("release_year"),
                        rs.getString("poster_path"),
                        ""
                    );
                    
                    String genres = rs.getString("genres");
                    movie.setGenres(genres != null ? genres : "");
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –æ—Ü–µ–Ω–∫—É
                    UserRating userRating = new UserRating(
                        userId,
                        movie.getId(),
                        rs.getDouble("rating"),
                        rs.getString("review_text")
                    );
                    userRating.setPublished(rs.getBoolean("published"));
                    movie.setUserRating(userRating);
                    movie.setWatched(true); // –§–∏–ª—å–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –æ—Ü–µ–Ω–µ–Ω
                    
                    movies.add(movie);
                }
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: " + e.getMessage());
        }
        
        System.out.println("‚≠ê –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + movies.size() + " –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤");
        return movies;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<Movie> getFavoriteMovies(int userId) {
        List<Movie> movies = new ArrayList<>();
        String query = """
            SELECT m.id, m.title, m.overview, m.vote_average, 
                   m.popularity, m.release_year, m.poster_path,
                   STRING_AGG(g.name, ', ') as genres,
                   uf.added_at
            FROM user_favorites uf
            JOIN movies m ON uf.movie_id = m.id
            LEFT JOIN movie_genres mg ON m.id = mg.movie_id
            LEFT JOIN genres g ON mg.genre_id = g.id
            WHERE uf.user_id = ?
            GROUP BY m.id, m.title, m.overview, m.vote_average, 
                     m.popularity, m.release_year, m.poster_path, uf.added_at
            ORDER BY uf.added_at DESC
            """;
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Movie movie = new Movie(
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("overview"),
                        rs.getDouble("vote_average"),
                        rs.getDouble("popularity"),
                        rs.getInt("release_year"),
                        rs.getString("poster_path"),
                        rs.getString("genres")
                    );
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É rs.getTimestamp("added_at") –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    movies.add(movie);
                }
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: " + e.getMessage());
        }
        return movies;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private List<Movie> executeMovieQuery(PreparedStatement stmt) throws SQLException {
        List<Movie> movies = new ArrayList<>();
        ResultSet rs = stmt.executeQuery();
        
        while (rs.next()) {
            movies.add(new Movie(
                rs.getInt("id"),
                rs.getString("title"),
                rs.getString("overview"),
                rs.getDouble("vote_average"),
                rs.getDouble("popularity"),
                rs.getInt("release_year"),
                rs.getString("poster_path"),
                rs.getString("genres")
            ));
        }
        
        return movies;
    }
    
    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∏–ª—å–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –≤ user_views
     */
    public void recordMovieView(int userId, int movieId) {
        String checkQuery = "SELECT id FROM user_views WHERE user_id = ? AND movie_id = ?";
        String insertQuery = "INSERT INTO user_views (user_id, movie_id, view_start_time, completed) VALUES (?, ?, CURRENT_TIMESTAMP, TRUE)";
        try {
            boolean exists;
            try (PreparedStatement checkStmt = dbConnection.prepareStatement(checkQuery)) {
                checkStmt.setInt(1, userId);
                checkStmt.setInt(2, movieId);
                ResultSet rs = checkStmt.executeQuery();
                exists = rs.next();
            }

            if (!exists) {
                try (PreparedStatement insertStmt = dbConnection.prepareStatement(insertQuery)) {
                    insertStmt.setInt(1, userId);
                    insertStmt.setInt(2, movieId);
                    insertStmt.executeUpdate();
                    System.out.println("‚úÖ –§–∏–ª—å–º " + movieId + " –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);
                }
            } else {
                System.out.println("‚ÑπÔ∏è –§–∏–ª—å–º " + movieId + " —É–∂–µ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);
            }
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞: " + e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∏–ª—å–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∏–∑ user_views)
     */
    public boolean isMovieWatchedByUser(int userId, int movieId) {
        String query = "SELECT COUNT(*) FROM user_views WHERE user_id = ? AND movie_id = ?";
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            stmt.setInt(2, movieId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞: " + e.getMessage());
        }
        return false;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean isMovieFavorite(int userId, int movieId) {
        String query = "SELECT 1 FROM user_favorites WHERE user_id = ? AND movie_id = ?";
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            stmt.setInt(2, movieId);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: " + e.getMessage());
            return false;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean addMovieToFavorites(int userId, int movieId) {
        String query = "INSERT INTO user_favorites (user_id, movie_id, added_at) VALUES (?, ?, NOW()) ON CONFLICT DO NOTHING";
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            stmt.setInt(2, movieId);
            int affected = stmt.executeUpdate();
            return affected > 0;
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: " + e.getMessage());
            return false;
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ñ–∏–ª—å–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean removeMovieFromFavorites(int userId, int movieId) {
        String query = "DELETE FROM user_favorites WHERE user_id = ? AND movie_id = ?";
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            stmt.setInt(2, movieId);
            int affected = stmt.executeUpdate();
            return affected > 0;
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: " + e.getMessage());
            return false;
        }
    }

    // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç —Å user_views –∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º –∫—ç—à–µ–º
    public void markMoviesAsShown(int userId, List<Movie> movies) {
        // –õ–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        Set<Integer> shownMovies = shownMoviesCache.computeIfAbsent(userId, k -> new HashSet<>());
        for (Movie movie : movies) {
            shownMovies.add(movie.getId());
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            recordMovieView(userId, movie.getId()); 
        }
        System.out.println("‚úÖ –û—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ: " + movies.size() + " —Ñ–∏–ª—å–º–æ–≤");
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–Ω–µ –æ—á–∏—â–∞–µ—Ç –ë–î)
    private final Map<Integer, Set<Integer>> currentSessionRecommendations = new HashMap<>();
    
    // –û—Ç–º–µ—Ç–∏—Ç—å —Ñ–∏–ª—å–º—ã –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    public void markMoviesAsRecommended(int userId, List<Movie> movies) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        Set<Integer> recommendedMovies = currentSessionRecommendations.computeIfAbsent(userId, k -> new HashSet<>());
        for (Movie movie : movies) {
            recommendedMovies.add(movie.getId());
        }
        System.out.println("üìä –û—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏: " + movies.size() + " —Ñ–∏–ª—å–º–æ–≤");
        System.out.println("üìä –í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏: " + recommendedMovies.size() + " —Ñ–∏–ª—å–º–æ–≤");
    }
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    public void clearSessionRecommendations(int userId) {
        currentSessionRecommendations.remove(userId);
        System.out.println("üîÑ –°–±—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
    public void clearShownMoviesForUser(int userId) {
        shownMoviesCache.remove(userId);
        System.out.println("üîÑ –°–±—Ä–æ—à–µ–Ω –∫—ç—à –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);
        // –û—á–∏—Å—Ç–∫–∞ –ë–î user_views –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞, —Ç.–∫. —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    }
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫—ç—à–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void clearAllUserCaches(int userId) {
        clearShownMoviesForUser(userId);
        clearSessionRecommendations(userId);
        System.out.println("üîÑ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ –∫—ç—à–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId);
    }
    
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç —Ñ–∏–ª—å–º—ã –∏–∑ user_views
    private Set<Integer> getShownMovies(int userId) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ –∏–∑ –∫—ç—à–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        Set<Integer> watchedFromDb = new HashSet<>();
        String query = "SELECT movie_id FROM user_views WHERE user_id = ?";
        try (PreparedStatement stmt = dbConnection.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                watchedFromDb.add(rs.getInt("movie_id"));
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –ë–î: " + e.getMessage());
        }
        
        Set<Integer> allShown = new HashSet<>(shownMoviesCache.getOrDefault(userId, new HashSet<>()));
        allShown.addAll(watchedFromDb);
        return allShown;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    private Set<Integer> getSessionRecommendedMovies(int userId) {
        return currentSessionRecommendations.getOrDefault(userId, new HashSet<>());
    }
    
    public void shutdown() {
        try {
            if (mlService != null) {
                mlService.shutdown();
            }
            if (dbConnection != null) {
                dbConnection.close();
            }
            System.out.println("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω");
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: " + e.getMessage());
        }
    }
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ saveUserRatingInternal
     */
    public boolean saveUserRating(UserRating rating) {
        return saveUserRatingInternal(rating);
    }

    public List<Movie> searchMovie(String searchQuery) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'searchMovie'");
    }
}
